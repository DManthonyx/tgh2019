{"version":3,"sources":["style.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Section1","Section2","Title","h1","BtnDiv","Button","button","PouchDB","plugin","PouchDBFind","App","state","remoteDB","localDB","blocks","componentDidMount","syncToRemote","filter","getPouchDocs","change","console","log","docs","sync","live","retry","on","err","allDocs","include_docs","attachments","then","result","setState","rows","catch","this","embedded","style","height","scene","graph","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2fea9692.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: #333333;\n`\n\nexport const Section1 = styled.div`\n  background: #333333;\n`\n\nexport const Section2 = styled.div`\n\n`\n\nexport const Title = styled.h1`\n  font-size: 3em;\n  letter-spacing: 2px;\n  text-align: center;\n`\n\nexport const BtnDiv = styled.div`\n  width: 100%;\n  margin: 10px 0px 10px 0px;\n  display: flex;\n  justify-content: space-evenly\n`\n\nexport const Button = styled.button`\n  width: 18%;\n  height: 50px;\n  border: 1px solid #333333;\n  border-radius: 3px;\n  background: black;\n  color: white;\n  &:hover {\n    transform: scale(1.1);\n    box-shadow: 0px 0px 9px 0px white;\n  }\n`","import React, { Component } from 'react';\nimport VRViz from \"vr-viz\";\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport {\n  Container,\n  Section1,\n  Section2,\n  BtnDiv,\n  Button,\n  Title\n} from './style.js'\n\nPouchDB.plugin(PouchDBFind)\n\nclass App extends Component {\n\n  state ={\n    remoteDB: new PouchDB('https://2aeca32c-420b-42c5-96ef-8032e3b74711-bluemix:c4401364a26441bb9839a382f32c5965b6dd1969afd80b1cf0a4d2a704eb94dd@2aeca32c-420b-42c5-96ef-8032e3b74711-bluemix.cloudant.com/tgh2019b'),\n    localDB: new PouchDB('tgh2019b'),\n    blocks: []\n  }\n\n  componentDidMount = () => {\n    if (this.state.remoteDB) {\n      this.syncToRemote();\n      // this.getBlocks();\n      this.filter()\n    }\n  }\n\n  getPouchDocs = (change) => {\n    console.log(this.state.localDB, change.change.docs,  'this is get pouch')\n    // this.setState({\n    //   blocks: [this.filter()]\n    // })\n  }\n\n  syncToRemote = () => {\n    this.state.localDB.sync(this.state.remoteDB, {live: true, retry: true})\n    .on('change', change => {\n      console.log('---------------')\n      this.getPouchDocs(change);\n    })\n    .on('error', err => console.log('uh oh! an error occured while synching.'));\n    console.log(this.state.localDB, 'this is remoteDB sync ')\n  }\n  \n  filter = () => {\n    this.state.remoteDB.allDocs({\n      include_docs: true,\n      attachments: true\n     }).then((result) => this.setState({ blocks: [result.rows]}) \n     ).then((result) =>  result.rows) \n      .catch(function (err) {\n      console.log(err);\n     });\n  }\n\n  render() {\n    console.log(this.state.blocks, 'this is blocks render')\n    const divStyle = {\n      height: '100px',\n    };\n    return (\n    <Container>\n      <Section1>\n        <Title>Casper Labs Plasma XR</Title>\n        <BtnDiv>\n          <Button>1</Button>\n          <Button>2</Button>\n          <Button>3</Button>\n          <Button>4</Button>\n          <Button>5</Button>\n        </BtnDiv>\n    </Section1>\n      <Section2>\n      <VRViz embedded style={divStyle}\n        scene={\n          {\n            'sky': {\n              'style': {\n                'color': '#333',\n                'texture': false,\n              }\n            },\n            'lights': [\n              {\n                'type': 'directional',\n                'color': '#fff',\n                'position': '0 1 1',\n                'intensity': 1,\n                'decay': 1,\n              },\n              {\n                'type': 'ambient',\n                'color': '#fff',\n                'intensity': 1,\n                'decay': 1,\n              }\n            ],\n            'camera': {\n              'position': '10 2 15',\n              'rotation': '0 0 0',\n            },\n          }\n        }\n        graph={\n          [\n            {\n              'type': 'BarGraph',\n              'data': {\n                'dataFile': 'data.json',\n                'fileType': 'json',\n              },\n              'style': {\n                'origin': [0, 0, 0],\n                'dimensions': {\n                  'width': 20,\n                  'height': 5,\n                  'depth': 10,\n                },\n              },\n              'mark': {\n                'type': 'box',\n                'position': {\n                  'x': {\n                    'scaleType': 'ordinal',\n                    'field': 'x',\n                  },\n                  'z': {\n                    'scaleType': 'ordinal',\n                    'field': 'z',\n                  }\n                },\n                'style': {\n                  'padding': {\n                    'x': 0.1,\n                    'z': 0.1,\n                  },\n                  'height': {\n                    'scaleType': 'linear',\n                    'startFromZero': true,\n                    'field': 'height',\n                  },\n                  'fill': {\n                    'opacity': 1,\n                    'scaleType': 'linear',\n                    'field': 'height',\n                    'color': ['red', 'gray'],\n                  },\n                },\n              },\n              'axis': {\n                'x-axis': {\n                  'orient': 'back-bottom',\n                  'title': {\n                    'value': '',\n                    'fontSize': 3,\n                    'color': 'white',\n                    'opacity': 0.7,\n                  },\n                  'ticks': {\n                    'noOfTicks': 10,\n                    'size': 0.01,\n                    'color': 'white',\n                    'opacity': 0.7,\n                    'fontSize': 3,\n                  },\n                  'grid': {\n                    'color': 'white',\n                    'opacity': 0.7,\n                  }\n                },\n                'y-axis': {\n                  'orient': 'back-left',\n                  'title': {\n                    'value': '',\n                    'fontSize': 3,\n                    'color': 'white',\n                    'opacity': 0.7,\n                  },\n                  'ticks': {\n                    'noOfTicks': 10,\n                    'size': 0.01,\n                    'color': 'white',\n                    'opacity': 0.7,\n                    'fontSize': 3,\n                  },\n                  'grid': {\n                    'color': 'white',\n                    'opacity': 0.7,\n                  }\n                },\n                'z-axis': {\n                  'orient': 'bottom-left',\n                  'title': {\n                    'value': '',\n                    'fontSize': 3,\n                    'color': 'white',\n                    'opacity': 0.7,\n                  },\n                  'ticks': {\n                    'noOfTicks': 10,\n                    'size': 0.01,\n                    'color': 'white',\n                    'opacity': 0.7,\n                    'fontSize': 3,\n                  },\n                  'grid': {\n                    'color': 'white',\n                    'opacity': 0.7,\n                  }\n                }\n              }\n            }\n          ]\n        }\n    />\n    </Section2>\n     </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}